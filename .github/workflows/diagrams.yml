name: Draw.io to PNG Processing V3

on:
  push:
    paths:
      - 'drawio_files/**/*.drawio'
  workflow_dispatch:

env:
  DRAWIO_VERSION: "26.2.2"

permissions:
  contents: write

jobs:
  process:
    runs-on: ubuntu-latest
    outputs:
      processed: ${{ steps.convert.outputs.processed }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Draw.io
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xvfb
          wget -q "https://github.com/jgraph/drawio-desktop/releases/download/v${{ env.DRAWIO_VERSION }}/drawio-amd64-${{ env.DRAWIO_VERSION }}.deb"
          sudo apt-get install -y "./drawio-amd64-${{ env.DRAWIO_VERSION }}.deb"

      - name: Convert & Update Changelog
        id: convert
        run: |
          echo "üîç Debug: Starting conversion process..."
          
          # Ensure directories exist
          mkdir -p png_files
          echo "üìÅ Created/verified png_files directory"
          
          # Initialize changelog if it doesn't exist
          if [[ ! -f "png_files/CHANGELOG.csv" ]]; then
            echo "Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage" > png_files/CHANGELOG.csv
            echo "üìÑ Created new changelog file"
          else
            echo "üìÑ Using existing changelog file"
          fi
          
          echo "üîç Debug: Checking for draw.io files..."
          
          # Get changed draw.io files - improved logic
          changed_files=""
          
          # Check if we have a previous commit
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            echo "üîç Debug: Checking git diff for changed files..."
            changed_files=$(git diff --name-only --diff-filter=AM HEAD^ HEAD -- "drawio_files/**/*.drawio" 2>/dev/null || true)
            echo "üîç Debug: Git diff found: '$changed_files'"
          fi
          
          # If no changed files or this is first commit, process all files
          if [[ -z "$changed_files" ]]; then
            echo "üîç Debug: No git changes found, checking all .drawio files..."
            if [[ -d "drawio_files" ]]; then
              changed_files=$(find drawio_files -name "*.drawio" -type f 2>/dev/null || true)
              echo "üîç Debug: Found all files: '$changed_files'"
            fi
          fi
          
          # If still no files, try manual workflow dispatch detection
          if [[ -z "$changed_files" && "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üîç Debug: Manual trigger detected, processing all .drawio files..."
            changed_files=$(find drawio_files -name "*.drawio" -type f 2>/dev/null || true)
          fi
          
          if [[ -z "$changed_files" ]]; then
            echo "‚ùå No .drawio files found to process"
            echo "üîç Debug: Contents of drawio_files directory:"
            ls -la drawio_files/ || echo "Directory doesn't exist"
            echo "processed=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üìä Files to process:"
          echo "$changed_files"
          
          processed_count=0
          failed_count=0
          current_date=$(date +"%d.%m.%Y")
          current_time=$(date +"%H:%M:%S")
          commit_hash=$(git log -1 --format="%h" 2>/dev/null || echo "unknown")
          author_name=$(git log -1 --format="%an" 2>/dev/null || echo "GitHub Action")
          commit_message=$(git log -1 --format="%s" 2>/dev/null || echo "Manual processing")
          
          echo "üîÑ Starting conversion process..."
          
          while IFS= read -r file; do
            [[ -z "$file" ]] && continue
            
            basename=$(basename "$file" .drawio)
            png_file="png_files/${basename}.png"
            
            echo "üîÑ Converting: $file -> $png_file"
            
            # Check if source file exists
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Source file not found: $file"
              action="Failed - Source Not Found"
              ((failed_count++))
            else
              # Convert to PNG with better error handling
              echo "üé® Running draw.io conversion..."
              if xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" drawio -x -f png -s 2.0 -o "$png_file" "$file" 2>&1; then
                # Verify file was created and is not empty
                if [[ -f "$png_file" && -s "$png_file" ]]; then
                  file_size=$(stat -f%z "$png_file" 2>/dev/null || stat -c%s "$png_file" 2>/dev/null || echo "unknown")
                  echo "‚úÖ Successfully converted $basename (${file_size} bytes)"
                  action="Converted to PNG"
                  ((processed_count++))
                else
                  echo "‚ùå PNG file created but is empty: $basename"
                  action="Failed - Empty PNG"
                  ((failed_count++))
                fi
              else
                echo "‚ùå draw.io conversion failed for: $basename"
                action="Failed - Conversion Error"
                ((failed_count++))
              fi
            fi
            
            # Add to changelog
            echo "${current_date},${current_time},\"${basename}\",\"${action}\",\"1.0\",\"${commit_hash}\",\"${author_name}\",\"${commit_message}\"" >> png_files/CHANGELOG.csv
            
          done <<< "$changed_files"
          
          echo "üìä Conversion Summary:"
          echo "‚úÖ Successfully processed: $processed_count files"
          echo "‚ùå Failed: $failed_count files"
          
          echo "processed=$processed_count" >> $GITHUB_OUTPUT
          echo "failed=$failed_count" >> $GITHUB_OUTPUT
          
          # List generated files
          echo "üìÅ Generated PNG files:"
          ls -la png_files/*.png 2>/dev/null || echo "No PNG files found"
          
          echo "üìÑ Changelog contents:"
          tail -5 png_files/CHANGELOG.csv || echo "No changelog entries found"

      - name: Commit Changes
        if: steps.convert.outputs.processed != '0'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add png_files/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate PNG files and update changelog [skip ci]"
            git push
          fi

      - name: Upload to SharePoint
        if: steps.convert.outputs.processed != '0'
        continue-on-error: true
        run: |
          # Get access token
          ACCESS_TOKEN=$(curl -s -X POST \
            "https://login.microsoftonline.com/${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}" \
            -d "scope=https://graph.microsoft.com/.default" \
            -d "grant_type=client_credentials" | \
            jq -r '.access_token')
          
          if [[ "$ACCESS_TOKEN" != "null" && -n "$ACCESS_TOKEN" ]]; then
            # Upload changelog
            curl -s -X PUT \
              "https://graph.microsoft.com/v1.0/drives/${{ vars.DIAGRAMS_SHAREPOINT_DRIVE_ID }}/root:/Diagrams/Diagrams_Changelog.csv:/content" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: text/csv" \
              --data-binary @png_files/CHANGELOG.csv
            echo "‚úÖ Uploaded changelog to SharePoint"
          else
            echo "‚ùå Failed to get SharePoint access token"
          fi

  notify:
    needs: process
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send Teams Notification
        continue-on-error: true
        run: |
          echo "üîî Preparing Teams notification..."
          
          if [[ "${{ needs.process.result }}" == "success" ]]; then
            status="‚úÖ Success"
            color="28a745"
          else
            status="‚ùå Failed"
            color="dc3545"
          fi
          
          processed="${{ needs.process.outputs.processed || '0' }}"
          failed="${{ needs.process.outputs.failed || '0' }}"
          
          # Check if Teams webhook is configured
          if [[ -n "${{ vars.DIAGRAMS_TEAMS_WEBHOOK }}" ]]; then
            echo "üì§ Sending Teams notification..."
            curl -X POST "${{ vars.DIAGRAMS_TEAMS_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"https://schema.org/extensions\",
                \"summary\": \"Draw.io Processing $status\",
                \"themeColor\": \"$color\",
                \"title\": \"üìä Draw.io Processing V3\",
                \"text\": \"Processing completed: $status\",
                \"sections\": [{
                  \"facts\": [
                    {\"name\": \"üìÅ Files Processed\", \"value\": \"$processed\"},
                    {\"name\": \"‚ùå Files Failed\", \"value\": \"$failed\"},
                    {\"name\": \"üîÑ Workflow Run\", \"value\": \"#${{ github.run_number }}\"},
                    {\"name\": \"üåø Branch\", \"value\": \"${{ github.ref_name }}\"}
                  ]
                }],
                \"potentialAction\": [{
                  \"@type\": \"OpenUri\",
                  \"name\": \"View Run Details\",
                  \"targets\": [{
                    \"os\": \"default\",
                    \"uri\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }]
                }]
              }"
            
            if [[ $? -eq 0 ]]; then
              echo "‚úÖ Teams notification sent successfully"
            else
              echo "‚ùå Failed to send Teams notification"
            fi
          else
            echo "‚ö†Ô∏è Teams webhook not configured (DIAGRAMS_TEAMS_WEBHOOK variable missing)"
            echo "‚ÑπÔ∏è To enable Teams notifications, set the DIAGRAMS_TEAMS_WEBHOOK repository variable"
          fi
          
          echo "üìä Final Summary:"
          echo "- Status: $status"
          echo "- Files processed: $processed"
          echo "- Files failed: $failed"
          echo "- Workflow run: #${{ github.run_number }}"
