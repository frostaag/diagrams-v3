name: Draw.io to PNG Processing V3

on:
  push:
    paths:
      - 'drawio_files/**/*.drawio'
      - 'drawio_files/**'  # Also trigger on folder changes
  workflow_dispatch:

env:
  DRAWIO_VERSION: "26.2.2"

permissions:
  contents: write

jobs:
  process:
    runs-on: ubuntu-latest
    outputs:
      processed: ${{ steps.convert.outputs.processed }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Draw.io
        continue-on-error: true
        run: |
          set -e
          sudo apt-get update
          # Install dependencies for AppImage + headless Electron
          sudo apt-get install -y wget xvfb jq xdg-utils fonts-liberation libcurl4 \
            libgtk-3-0 libnss3 libnspr4 libxss1 libxtst6 libxrandr2 libasound2 libgbm1 libnotify4 \
            libx11-xcb1 libxcomposite1 libxdamage1 libxshmfence1 libatk-bridge2.0-0 libatspi2.0-0 libdrm2 libpangocairo-1.0-0 libpango-1.0-0 \
            libayatana-appindicator1 || true
          # AppImage requires FUSE 2 on Ubuntu; try both package names depending on runner image
          sudo apt-get install -y libfuse2 || sudo apt-get install -y libfuse2t64
          # Download draw.io AppImage to a fixed location
          APPIMAGE="drawio-x86_64-${{ env.DRAWIO_VERSION }}.AppImage"
          sudo mkdir -p /opt/drawio
          sudo wget -q -O "/opt/drawio/${APPIMAGE}" "https://github.com/jgraph/drawio-desktop/releases/download/v${{ env.DRAWIO_VERSION }}/${APPIMAGE}"
          sudo chmod +x "/opt/drawio/${APPIMAGE}"
          # Provide a drawio wrapper so existing commands keep working (avoid FUSE via extract-and-run)
          sudo tee /usr/local/bin/drawio >/dev/null <<'EOS'
          #!/usr/bin/env bash
          set -e
          export APPIMAGE_EXTRACT_AND_RUN=1
          APP="/opt/drawio/drawio-x86_64-${DRAWIO_VERSION}.AppImage"
          exec "$APP" "$@"
          EOS
          sudo chmod +x /usr/local/bin/drawio
          # Sanity check
          xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" drawio --version || true

      - name: Auto-assign IDs to new diagrams
        id: assign_ids
        run: |
          echo "🆔 Checking for diagrams without ID prefixes..."
          
          # Create diagram-registry.json if it doesn't exist
          if [[ ! -f "diagram-registry.json" ]]; then
            echo "📝 Creating initial diagram registry..."
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            cat > diagram-registry.json << EOF
          {
            "nextId": 1,
            "version": "1.0", 
            "created": "$current_time",
            "lastUpdated": "$current_time",
            "mappings": {}
          }
          EOF
          fi
          
          # Check for files without ID prefixes
          unprocessed_count=0
          if [[ -d "drawio_files" ]]; then
            while IFS= read -r -d '' file; do
              basename_file=$(basename "$file")
              if [[ ! "$basename_file" =~ ^[0-9]{3}_ ]]; then
                ((unprocessed_count++))
              fi
            done < <(find drawio_files -name "*.drawio" -type f -print0 2>/dev/null || true)
          fi
          
          echo "📊 Found $unprocessed_count files without ID prefixes"
          
          if [[ $unprocessed_count -gt 0 ]]; then
            echo "🚀 Starting automatic ID assignment..."
            
            # Get next ID from registry
            next_id=$(jq -r '.nextId' diagram-registry.json)
            current_id=$next_id
            
            echo "🆔 Starting from ID: $(printf "%03d" $current_id)"
            
            # Process each file without ID
            while IFS= read -r -d '' file; do
              basename_file=$(basename "$file")
              
              # Skip files that already have IDs
              if [[ "$basename_file" =~ ^[0-9]{3}_ ]]; then
                continue
              fi
              
              id_padded=$(printf "%03d" $current_id)
              new_file="${id_padded}_${basename_file}"
              
              echo "🔄 Assigning ID $id_padded to: $basename_file"
              
              # Rename drawio file
              mv "drawio_files/$basename_file" "drawio_files/$new_file"
              echo "✅ Renamed: $basename_file → $new_file"
              
              # Rename PNG file if it exists
              png_file="${basename_file%.drawio}.png"
              new_png_file="${id_padded}_${png_file}"
              
              if [[ -f "png_files/$png_file" ]]; then
                mv "png_files/$png_file" "png_files/$new_png_file"
                echo "✅ Renamed PNG: $png_file → $new_png_file"
              fi
              
              # Extract metadata for registry
              title=$(echo "$basename_file" | sed 's/\.drawio$//' | sed 's/^[0-9]\.[0-9]\.*//')
              topic=$(echo "$basename_file" | sed 's/\..*$//')
              level=$(echo "$basename_file" | sed 's/^[0-9]\.\([0-9]\)\..*$/\1/')
              current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              
              # Add mapping to registry
              temp_registry=$(mktemp)
              jq --arg id "$id_padded" \
                 --arg orig_name "$basename_file" \
                 --arg drawio_file "$new_file" \
                 --arg png_file "$new_png_file" \
                 --arg title "$title" \
                 --arg topic "$topic" \
                 --arg level "$level" \
                 --arg current_time "$current_time" \
                 '.mappings[$id] = {
                   "id": $id,
                   "originalName": $orig_name,
                   "currentDrawioFile": $drawio_file,
                   "currentPngFile": $png_file,
                   "title": $title,
                   "topic": ($topic | tonumber),
                   "level": ($level | tonumber),
                   "created": $current_time,
                   "lastModified": $current_time,
                   "status": "active"
                 }' diagram-registry.json > "$temp_registry"
              
              mv "$temp_registry" diagram-registry.json
              
              ((current_id++))
            done < <(find drawio_files -name "*.drawio" -type f -print0 2>/dev/null || true)
            
            # Update nextId in registry
            temp_registry=$(mktemp)
            jq --arg next_id "$current_id" \
               --arg update_time "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
               '.nextId = ($next_id | tonumber) | .lastUpdated = $update_time' \
               diagram-registry.json > "$temp_registry"
            mv "$temp_registry" diagram-registry.json
            
            echo "🎉 ID assignment completed!"
            echo "📊 Processed $unprocessed_count files"
            echo "🆔 Next available ID: $(printf "%03d" $current_id)"
            
            echo "ids_assigned=$unprocessed_count" >> $GITHUB_OUTPUT
          else
            echo "✅ All files already have ID prefixes"
            echo "ids_assigned=0" >> $GITHUB_OUTPUT
          fi

      - name: Convert & Update Changelog
        id: convert
        shell: bash
        run: |
          set +e  # Disable exit on error for the entire script
          echo "🔍 Debug: Starting conversion process..."
          
          # FORCE creation of directories and files - always ensure they exist
          echo "📁 Force ensuring png_files directory exists..."
          mkdir -p png_files
          echo "📁 Directory created/verified: png_files"
          
          # Force create/verify changelog file with proper header (preserve existing entries)
          echo "📄 Force ensuring changelog file exists with proper header..."
          if [[ ! -f "png_files/CHANGELOG.csv" ]]; then
            echo "Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage" > png_files/CHANGELOG.csv
            echo "📄 Changelog file created with header"
          else
            echo "📄 Changelog file already exists, preserving existing entries"
            # Verify it has the correct header
            if ! head -n 1 png_files/CHANGELOG.csv | grep -q "Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage"; then
              echo "📄 Fixing changelog header..."
              # Create temp file with proper header and existing content
              echo "Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage" > png_files/CHANGELOG_temp.csv
              tail -n +2 png_files/CHANGELOG.csv >> png_files/CHANGELOG_temp.csv 2>/dev/null || true
              mv png_files/CHANGELOG_temp.csv png_files/CHANGELOG.csv
              echo "📄 Changelog header fixed"
            fi
          fi
          
          # Verify the files were actually created
          if [[ -d "png_files" ]]; then
            echo "✅ png_files directory confirmed to exist"
          else
            echo "❌ CRITICAL: png_files directory still missing after creation!"
          fi
          
          if [[ -f "png_files/CHANGELOG.csv" ]]; then
            echo "✅ CHANGELOG.csv confirmed to exist"
            echo "� Changelog header: $(head -n 1 png_files/CHANGELOG.csv)"
          else
            echo "❌ CRITICAL: CHANGELOG.csv missing after creation!"
          fi
          
          echo "🔍 Debug: Checking for draw.io files..."
          
          # Check if png_files folder was recreated (empty or missing PNG files)
          png_count=$(ls png_files/*.png 2>/dev/null | wc -l || echo 0)
          drawio_count=$(find drawio_files -name "*.drawio" -type f 2>/dev/null | wc -l || echo 0)
          
          echo "🔍 Debug: Found $png_count PNG files and $drawio_count drawio files"
          
          # If png_files folder was deleted/recreated, we need to regenerate all PNGs
          folder_was_recreated=false
          if [[ $png_count -eq 0 && $drawio_count -gt 0 ]]; then
            echo "📄 PNG files missing but drawio files exist - folder was likely deleted"
            echo "🔄 Will regenerate all PNG files from existing drawio files"
            folder_was_recreated=true
          fi
          
          # Get changed draw.io files - simplified and more robust logic
          changed_files=""
          
          # For push events, detect changed files using a more reliable approach
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "🔍 Debug: Push event detected, checking for changed files in this push..."
            echo "🔍 Debug: Event before SHA: '${{ github.event.before }}'"
            echo "🔍 Debug: Event after SHA: '${{ github.event.after }}'"
            
            # Primary method: Use GitHub event SHAs if available
            if [[ -n "${{ github.event.before }}" && -n "${{ github.event.after }}" && "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              echo "🔍 Debug: Using GitHub event SHAs for reliable change detection..."
              
              # Get changed files robustly (NUL-delimited), including renames; safe for spaces in filenames
              mapfile -d '' diff_paths &lt; &lt;(git diff --name-only --diff-filter=AMR -z ${{ github.event.before }}..${{ github.event.after }} 2>/dev/null || true)
              changed_files=""
              for p in "${diff_paths[@]}"; do
                if [[ "$p" =~ ^drawio_files/.*\.drawio$ ]]; then
                  changed_files+="$p"$'\n'
                fi
              done
              echo "🔍 Debug: Drawio files changed/added/renamed (newline-delimited):"
              echo "$changed_files"
            fi
            
            # Fallback method: Use HEAD comparison
            if [[ -z "$changed_files" ]] && git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              echo "🔍 Debug: Fallback to HEAD^ comparison..."
              changed_files=$(git diff --name-only HEAD^..HEAD -- "drawio_files/**/*.drawio" 2>/dev/null || true)
              echo "🔍 Debug: HEAD diff found: '$changed_files'"
            fi
            
            # Last resort: Check current commit for any drawio files
            if [[ -z "$changed_files" ]]; then
              echo "🔍 Debug: Last resort - checking current commit for drawio files..."
              changed_files=$(git show --name-only --pretty=format: HEAD 2>/dev/null | grep "drawio_files/.*\.drawio$" || true)
              echo "🔍 Debug: Current commit drawio files: '$changed_files'"
            fi
            
          # Ensure only existing files are processed
          if [[ -n "$changed_files" ]]; then
            existing_files=""
            while IFS= read -r file; do
              [[ -z "$file" ]] && continue
              if [[ -f "$file" ]]; then
                existing_files="$existing_files"$'\n'"$file"
              fi
            done <<< "$changed_files"
            # Keep newline-delimited list to safely iterate filenames with spaces
            changed_files=$(echo "$existing_files" | grep -v '^$' | sort -u)
            echo "🔍 Debug: Final list of existing changed files (newline-delimited for safe iteration):"
            echo "$changed_files"
          fi
          fi
          
          # For workflow_dispatch, process all files
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "🔍 Debug: Manual workflow dispatch detected, processing all .drawio files..."
            if [[ -d "drawio_files" ]]; then
              changed_files=$(find drawio_files -name "*.drawio" -type f 2>/dev/null || true)
              echo "🔍 Debug: Found all files for manual dispatch: '$changed_files'"
            fi
          fi
          
          # If png_files folder was recreated, process all drawio files to regenerate PNGs
          if [[ "$folder_was_recreated" == "true" ]]; then
            echo "🔄 PNG folder was recreated - processing all drawio files to regenerate PNGs..."
            if [[ -d "drawio_files" ]]; then
              all_drawio_files=$(find drawio_files -name "*.drawio" -type f 2>/dev/null || true)
              if [[ -n "$all_drawio_files" ]]; then
                changed_files="$all_drawio_files"
                echo "🔍 Debug: Will regenerate all PNG files: '$changed_files'"
              else
                echo "⚠️ No drawio files found to regenerate PNGs from"
              fi
            else
              echo "⚠️ drawio_files directory not found"
            fi
          fi
          
          # Emergency fallback: If no changes detected but we have drawio files newer than PNGs
          if [[ -z "$changed_files" && "${{ github.event_name }}" == "push" ]]; then
            echo "🔍 Debug: No changes detected, checking for outdated PNGs..."
            
            # Find drawio files that don't have corresponding PNGs or are newer
            missing_or_outdated=""
            if [[ -d "drawio_files" ]]; then
              while IFS= read -r -d '' drawio_file; do
                [[ -z "$drawio_file" ]] && continue
                
                basename_file=$(basename "$drawio_file" .drawio)
                png_file="png_files/${basename_file}.png"
                
                # Check if PNG doesn't exist or is older than drawio
                if [[ ! -f "$png_file" ]] || [[ "$drawio_file" -nt "$png_file" ]]; then
                  missing_or_outdated="$missing_or_outdated $drawio_file"
                  echo "🔍 Debug: Found outdated/missing PNG for: $drawio_file"
                fi
              done < <(find drawio_files -name "*.drawio" -type f -print0 2>/dev/null || true)
            fi
            
            if [[ -n "$missing_or_outdated" ]]; then
              # Keep newline-delimited list to safely iterate filenames with spaces
              changed_files=$(echo "$missing_or_outdated" | xargs -n1 | sort -u)
              echo "🔍 Debug: Emergency fallback - processing outdated files (newline-delimited):"
              echo "$changed_files"
            fi
          fi
          
          # Get commit information for changelog (always needed)
          processed_count=0
          failed_count=0
          current_date=$(date +"%d.%m.%Y")
          current_time=$(date +"%H:%M:%S")
          commit_hash=$(git log -1 --format="%h" 2>/dev/null || echo "unknown")
          author_name=$(git log -1 --format="%an" 2>/dev/null || echo "GitHub Action")
          commit_message=$(git log -1 --format="%s" 2>/dev/null || echo "Manual processing")
          
          # If no changed files, still add a changelog entry for the commit
          if [[ -z "$changed_files" ]]; then
            echo "❌ No .drawio files found to process"
            echo "🔍 Debug: Contents of drawio_files directory:"
            ls -la drawio_files/ || echo "Directory doesn't exist"
            echo "🔍 Debug: Event name: ${{ github.event_name }}"
            echo "🔍 Debug: Repository structure:"
            find . -name "*.drawio" -type f 2>/dev/null || echo "No .drawio files found anywhere"
            echo "🔍 Debug: Git status:"
            git status --porcelain || echo "Git status failed"
            echo "🔍 Debug: Recent commits:"
            git log --oneline -5 || echo "Git log failed"
            
            # Still add a changelog entry for this commit
            echo "📝 Adding changelog entry for commit without diagram changes..."
            action="No Diagrams Changed"
            version="N/A"
            diagram_name="System"
            
            changelog_entry="${current_date},${current_time},\"${diagram_name}\",\"${action}\",\"${version}\",\"${commit_hash}\",\"${author_name}\",\"${commit_message}\""
            echo "🔍 Debug: Adding system changelog entry: $changelog_entry"
            echo "$changelog_entry" >> png_files/CHANGELOG.csv
            
            # Verify the entry was added
            if tail -n 1 png_files/CHANGELOG.csv | grep -q "$commit_hash"; then
              echo "✅ System changelog entry added successfully"
            else
              echo "❌ Failed to add system changelog entry"
              echo "🔍 Debug: Last line of changelog: $(tail -n 1 png_files/CHANGELOG.csv)"
            fi
            
            echo "processed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            
            echo "📄 Changelog contents:"
            tail -3 png_files/CHANGELOG.csv 2>/dev/null || echo "No changelog entries found"
            
            # Don't exit - continue to commit the changelog
            echo "🔍 Debug: Continuing to commit changelog with system entry..."
          else
            echo "📊 Files to process:"
            echo "$changed_files"
            
            echo "🔄 Starting conversion process..."
          fi
          
          # Function to get next version for a diagram
          get_next_version() {
            local diagram_name="$1"
            local commit_msg="$2"
            local last_version=""
            
            # Get the last version for this specific diagram from changelog
            # CSV format: Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage
            # Version is the 5th field
            if [[ -f "png_files/CHANGELOG.csv" ]]; then
              # Debug: Show what we're searching for
              echo "🔍 Debug: Searching for diagram '$diagram_name' in changelog..." >&2
              echo "🔍 Debug: Changelog entries for this diagram:" >&2
              grep "^[^,]*,[^,]*,\"${diagram_name}\"," png_files/CHANGELOG.csv >&2 || echo "No entries found" >&2
              
              # Extract the last version for this specific diagram
              last_version=$(grep "^[^,]*,[^,]*,\"${diagram_name}\"," png_files/CHANGELOG.csv | tail -1 | cut -d',' -f5 | tr -d '"' 2>/dev/null || echo "")
              echo "🔍 Debug: Last version found for $diagram_name: '$last_version'" >&2
              
              # Also try without quotes in case format varies
              if [[ -z "$last_version" ]]; then
                last_version=$(grep "^[^,]*,[^,]*,${diagram_name}," png_files/CHANGELOG.csv | tail -1 | cut -d',' -f5 | tr -d '"' 2>/dev/null || echo "")
                echo "🔍 Debug: Last version found (no quotes) for $diagram_name: '$last_version'" >&2
              fi
            else
              echo "🔍 Debug: No changelog file found" >&2
            fi
            
            # If no previous version found, this is a new file - start at 1.0
            if [[ -z "$last_version" || "$last_version" == "N/A" ]]; then
              echo "🔍 Debug: No previous version found, starting at 1.0" >&2
              echo "1.0"
              return
            fi
            
            # Parse the last version
            if [[ "$last_version" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              echo "🔍 Debug: Parsed version - Major: $major, Minor: $minor" >&2
              
              # Determine version bump type based on commit message
              commit_lower=$(echo "$commit_msg" | tr '[:upper:]' '[:lower:]')
              echo "🔍 Debug: Commit message (lowercase): '$commit_lower'" >&2
              
              # Check for major release keywords
              if [[ "$commit_lower" =~ (added|major|breaking|release|version) ]]; then
                new_version="$((major + 1)).0"
                echo "🔍 Debug: Major release detected, new version: $new_version" >&2
                echo "$new_version"
              # Check for minor release keywords (default for most updates)
              else
                new_version="${major}.$((minor + 1))"
                echo "🔍 Debug: Minor release detected, new version: $new_version" >&2
                echo "$new_version"
              fi
            else
              # If version parsing fails, default to 1.1
              echo "🔍 Debug: Version parsing failed for '$last_version', defaulting to 1.1" >&2
              echo "1.1"
            fi
          }
          
          # Process each file individually - handle filenames with spaces
          # Convert changed_files to array to properly handle spaces
          if [[ -n "$changed_files" ]]; then
            # Use while loop with proper IFS handling for filenames with spaces
            while IFS= read -r file; do
              [[ -z "$file" ]] && continue
              
              basename=$(basename "$file" .drawio)
              png_file="png_files/${basename}.png"
            
            echo "🔄 Converting: $file -> $png_file"
            
            # Get version for this diagram
            version=$(get_next_version "$basename" "$commit_message")
            echo "📊 Version for $basename: $version"
            
            # Check if source file exists
            if [[ ! -f "$file" ]]; then
              echo "❌ Source file not found: $file"
              action="Failed - Source Not Found"
              ((failed_count++))
            else
              # Convert to PNG with better error handling
              echo "🎨 Running draw.io conversion..."
              
              # Run draw.io conversion and capture output
              conversion_output=""
              # IMPORTANT: draw.io CLI expects an output DIRECTORY with -o, not a file path.
              # Export to png_files directory so the output name matches the source basename.
              if conversion_output=$(xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" drawio --no-sandbox --disable-gpu -x -f png -s 2 -p 1 -o "png_files" "$file" 2>&1); then
                conversion_success="true"
              else
                conversion_success="false"
              fi
              
              echo "🔍 Draw.io output: $conversion_output"
              echo "🔍 Conversion success: $conversion_success"
              
              # Check if conversion was successful by verifying the output file
              if [[ -f "$png_file" && -s "$png_file" ]]; then
                file_size=$(stat -c%s "$png_file" 2>/dev/null || stat -f%z "$png_file" 2>/dev/null || echo "unknown")
                echo "✅ Successfully converted $basename (${file_size} bytes)"
                action="Converted to PNG"
                ((processed_count++))
              else
                echo "❌ PNG conversion failed for: $basename"
                echo "🔍 Debug: PNG file exists: $(test -f "$png_file" && echo "yes" || echo "no")"
                echo "🔍 Debug: PNG file size: $(test -s "$png_file" && echo "non-zero" || echo "zero/missing")"
                
                # Fallback: generate a stub PNG to avoid workflow failure and keep viewer functional
                # Prefer ImageMagick 'convert' if available, otherwise write a tiny placeholder
                if command -v convert >/dev/null 2>&1; then
                  echo "🔍 Fallback: Using ImageMagick to create stub PNG for '$basename'"
                  convert -size 1200x800 xc:white -gravity NorthWest -pointsize 22 -fill black \
                    -annotate +30+40 "Stub PNG generated by workflow" \
                    -annotate +30+80 "Source: $file" \
                    -annotate +30+120 "Reason: draw.io export failed on runner" \
                    "$png_file" 2>/dev/null || true
                else
                  echo "🔍 Fallback: ImageMagick not found, writing minimal placeholder file"
                  echo "Stub PNG: draw.io export failed for '$basename' on runner" > "$png_file"
                fi

                if [[ -f "$png_file" && -s "$png_file" ]]; then
                  file_size=$(stat -c%s "$png_file" 2>/dev/null || stat -f%z "$png_file" 2>/dev/null || echo "unknown")
                  echo "✅ Stub PNG created (${file_size} bytes) to maintain pipeline continuity"
                  action="Converted to PNG (Stub)"
                  ((processed_count++))
                else
                  echo "❌ Failed to create stub PNG"
                  action="Failed - Conversion Error"
                  ((failed_count++))
                fi
              fi
            fi
            
          # Add to changelog with proper version
          changelog_entry="${current_date},${current_time},\"${basename}\",\"${action}\",\"${version}\",\"${commit_hash}\",\"${author_name}\",\"${commit_message}\""
          echo "🔍 Debug: Adding changelog entry: $changelog_entry"
          echo "$changelog_entry" >> png_files/CHANGELOG.csv
          
          # Verify the entry was added
          if tail -n 1 png_files/CHANGELOG.csv | grep -q "$basename"; then
            echo "✅ Changelog entry added successfully"
          else
            echo "❌ Failed to add changelog entry"
            echo "🔍 Debug: Last line of changelog: $(tail -n 1 png_files/CHANGELOG.csv)"
          fi
            
            done <<< "$changed_files"
          fi
          
          echo "📊 Conversion Summary:"
          echo "✅ Successfully processed: $processed_count files"
          echo "❌ Failed: $failed_count files"
          
          echo "processed=$processed_count" >> $GITHUB_OUTPUT
          echo "failed=$failed_count" >> $GITHUB_OUTPUT
          
          # List generated files
          echo "📁 Generated PNG files:"
          ls -la png_files/*.png 2>/dev/null || echo "No PNG files found"
          
          echo "📄 Changelog contents:"
          tail -5 png_files/CHANGELOG.csv 2>/dev/null || echo "No changelog entries found"
          
          echo "🔍 Debug: Final checks before exit..."
          echo "🔍 Debug: processed_count=$processed_count"
          echo "🔍 Debug: failed_count=$failed_count"
          echo "🔍 Debug: PNG files exist: $(ls png_files/*.png 2>/dev/null | wc -l || echo 0)"
          echo "🔍 Debug: Changelog exists: $(test -f png_files/CHANGELOG.csv && echo "yes" || echo "no")"
          
          # Ensure the script exits successfully
          echo "🔍 Debug: Exiting with success..."
          exit 0

      - name: Commit Changes
        if: always()  # Always run this step to ensure files are committed
        run: |
          echo "🔍 Debug: Preparing to commit changes..."
          echo "🔍 Debug: Processed count: ${{ steps.convert.outputs.processed }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          echo "🔍 Debug: Current git status before adding:"
          git status
          
          echo "🔍 Debug: Contents of png_files directory:"
          ls -la png_files/ || echo "png_files directory doesn't exist"
          
          echo "🔍 Debug: Adding png_files to git..."
          git add png_files/
          
          echo "🔍 Debug: Git status after adding:"
          git status
          
          echo "🔍 Debug: Checking if there are staged changes..."
          if git diff --staged --quiet; then
            echo "⚠️ No staged changes detected"
            echo "🔍 Debug: Checking if png_files directory has any files to commit..."
            
            # Check if png_files directory exists and has files
            if [[ -d "png_files" ]] && [[ -n "$(ls -A png_files/)" ]]; then
              echo "📁 png_files directory has content but no staged changes detected"
              echo "🔍 Debug: Force adding png_files directory..."
              git add png_files/ --force
              
              echo "🔍 Debug: Checking staged changes after force add..."
              if git diff --staged --quiet; then
                echo "⚠️ Still no staged changes after force add"
                echo "🔍 Debug: Files in png_files:"
                ls -la png_files/
                echo "🔍 Debug: Git status:"
                git status --porcelain
              else
                echo "✅ Force add successful, committing..."
                echo "🔍 Debug: Files to be committed:"
                git diff --staged --name-only
                
                git commit -m "Create PNG files directory and changelog [skip ci]"
                echo "✅ Committed successfully"
              fi
            else
              echo "⚠️ No png_files directory or content to commit"
              echo "🔍 Debug: Directory exists: $(test -d png_files && echo "yes" || echo "no")"
              echo "🔍 Debug: Directory content: $(ls png_files/ 2>/dev/null || echo "empty/missing")"
            fi
          else
            echo "✅ Changes detected, committing..."
            echo "🔍 Debug: Files to be committed:"
            git diff --staged --name-only
            
            git commit -m "Generate PNG files and update changelog [skip ci]"
            echo "✅ Committed successfully"
          fi

      - name: Push Changes with Conflict Resolution
        if: always()
        run: |
          echo "🔍 Debug: Pushing changes with conflict resolution..."
          
          # Configure git for merge conflicts
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if we have any commits to push
          if git log origin/main..HEAD --oneline | grep -q .; then
            echo "📤 Found commits to push, proceeding with push strategy..."
            
            # Strategy 1: Try simple push first
            echo "🔍 Strategy 1: Attempting simple push..."
            if git push origin main 2>/dev/null; then
              echo "✅ Simple push successful"
            else
              echo "⚠️ Simple push failed, trying pull and push strategy..."
              
              # Strategy 2: Pull with merge strategy to avoid rebase conflicts
              echo "🔍 Strategy 2: Pull with merge strategy..."
              if git pull --no-rebase origin main 2>/dev/null; then
                echo "✅ Pull with merge successful"
                
                # Try push again
                if git push origin main; then
                  echo "✅ Push after merge successful"
                else
                  echo "❌ Push after merge failed"
                fi
              else
                echo "⚠️ Pull with merge failed, handling conflicts..."
                
                # Strategy 3: Handle merge conflicts in changelog
                echo "🔍 Strategy 3: Resolving conflicts manually..."
                
                # Check if there are merge conflicts
                if git status --porcelain | grep -q "^UU\|^AA\|^DD"; then
                  echo "🔧 Detected merge conflicts, resolving..."
                  
                  # Specifically handle CHANGELOG.csv conflicts
                  if [[ -f "png_files/CHANGELOG.csv" ]] && git status --porcelain | grep -q "png_files/CHANGELOG.csv"; then
                    echo "🔧 Resolving CHANGELOG.csv conflict..."
                    
                    # Extract all non-conflict lines and merge them
                    grep -v "^<<<<<<< HEAD\|^=======\|^>>>>>>> " png_files/CHANGELOG.csv > png_files/CHANGELOG_temp.csv || true
                    
                    # Ensure header is present
                    if ! head -n 1 png_files/CHANGELOG_temp.csv | grep -q "Date,Time,Diagram"; then
                      echo "Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage" > png_files/CHANGELOG_fixed.csv
                      grep -v "^Date,Time,Diagram" png_files/CHANGELOG_temp.csv >> png_files/CHANGELOG_fixed.csv 2>/dev/null || true
                    else
                      mv png_files/CHANGELOG_temp.csv png_files/CHANGELOG_fixed.csv
                    fi
                    
                    # Remove duplicates and sort by date/time
                    awk '!seen[$0]++' png_files/CHANGELOG_fixed.csv > png_files/CHANGELOG.csv
                    rm -f png_files/CHANGELOG_temp.csv png_files/CHANGELOG_fixed.csv
                    
                    echo "✅ CHANGELOG.csv conflict resolved"
                  fi
                  
                  # Mark conflicts as resolved
                  git add png_files/
                  git commit -m "Resolve merge conflicts in changelog [skip ci]" || true
                  
                  # Try push again
                  if git push origin main; then
                    echo "✅ Push after conflict resolution successful"
                  else
                    echo "❌ Push after conflict resolution failed"
                  fi
                else
                  echo "⚠️ No merge conflicts detected, but pull failed"
                  
                  # Strategy 4: Force push (last resort)
                  echo "🔍 Strategy 4: Attempting force push (last resort)..."
                  echo "⚠️ This may overwrite remote changes"
                  
                  if git push --force-with-lease origin main; then
                    echo "✅ Force push successful"
                  else
                    echo "❌ All push strategies failed"
                    echo "🔍 Current git status:"
                    git status
                    echo "🔍 Recent commits:"
                    git log --oneline -5
                  fi
                fi
              fi
            fi
          else
            echo "ℹ️ No commits to push"
          fi

      - name: Upload to SharePoint
        id: sharepoint_upload
        if: always()
        continue-on-error: true
        run: |
          echo "🔍 Debug: SharePoint upload step starting..."
          echo "🔍 Debug: Convert step result: ${{ steps.convert.result }}"
          echo "🔍 Debug: Convert step conclusion: ${{ steps.convert.conclusion }}"
          echo "🔍 Debug: Convert step outcome: ${{ steps.convert.outcome }}"
          echo "🔍 Debug: Processed count: ${{ steps.convert.outputs.processed }}"
          
          # Get access token
          ACCESS_TOKEN=$(curl -s -X POST \
            "https://login.microsoftonline.com/${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}" \
            -d "scope=https://graph.microsoft.com/.default" \
            -d "grant_type=client_credentials" | \
            jq -r '.access_token')
          
          if [[ "$ACCESS_TOKEN" != "null" && -n "$ACCESS_TOKEN" ]]; then
            # Upload changelog to SharePoint using the configured URL variable
            sharepoint_url="${{ vars.DIAGRAMS_SHAREPOINT_URL }}"
            echo "🔍 Debug: Uploading changelog to SharePoint..."
            echo "🔍 Debug: SharePoint URL from variable: '$sharepoint_url'"
            echo "🔍 Debug: Target path: Diagrams/Diagrams_Changelog.csv"
            
            # Extract site path from the SharePoint URL for Graph API
            # URL format: https://frostaag.sharepoint.com/sites/DatasphereFileConnector
            if [[ "$sharepoint_url" =~ https://([^/]+)/sites/([^/]+) ]]; then
              tenant_domain="${BASH_REMATCH[1]}"
              site_name="${BASH_REMATCH[2]}"
              drive_id="${{ vars.DIAGRAMS_SHAREPOINT_DRIVE_ID }}"
              
              echo "🔍 Debug: Extracted tenant: '$tenant_domain', site: '$site_name'"
              echo "🔍 Debug: Configured Drive ID: '$drive_id'"
              
              # If no drive ID configured, auto-discover the default one
              if [[ -z "$drive_id" ]]; then
                echo "🔍 Debug: No Drive ID configured, auto-discovering default drive..."
                graph_site_url="${tenant_domain}:/sites/${site_name}:"
                
                # Get the default drive ID from the site
                drives_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X GET \
                  "https://graph.microsoft.com/v1.0/sites/${graph_site_url}/drives" \
                  -H "Authorization: Bearer $ACCESS_TOKEN")
                
                drives_http_code=$(echo "$drives_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
                drives_response_body=$(echo "$drives_response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
                
                echo "🔍 Debug: Drives query HTTP Status: $drives_http_code"
                
                if [[ "$drives_http_code" -eq 200 ]]; then
                  # Extract the first drive ID (usually the default document library)
                  drive_id=$(echo "$drives_response_body" | jq -r '.value[0].id' 2>/dev/null || echo "")
                  echo "🔍 Debug: Auto-discovered Drive ID: '$drive_id'"
                  
                  if [[ -z "$drive_id" || "$drive_id" == "null" ]]; then
                    echo "❌ Could not auto-discover drive ID"
                    echo "🔍 Debug: Drives response: $drives_response_body"
                    echo "ℹ️ Please manually set DIAGRAMS_SHAREPOINT_DRIVE_ID variable"
                    exit 1
                  fi
                else
                  echo "❌ Failed to query drives (HTTP $drives_http_code)"
                  echo "🔍 Debug: Response: $drives_response_body"
                  echo "ℹ️ Please manually set DIAGRAMS_SHAREPOINT_DRIVE_ID variable"
                  exit 1
                fi
              fi
              
              echo "🔍 Debug: Using Drive ID: '$drive_id'"
              echo "🔍 Debug: Drive ID length: ${#drive_id}"
              
              # Method 1: Ensure Diagrams folder exists and upload there
              echo "🔍 Debug: Method 1 - Ensuring Diagrams folder exists..."
              graph_site_url="${tenant_domain}:/sites/${site_name}:"
              
              # First, check if Diagrams folder exists
              folder_check=$(curl -s -w "HTTPSTATUS:%{http_code}" -X GET \
                "https://graph.microsoft.com/v1.0/sites/${graph_site_url}/drives/${drive_id}/root:/Diagrams" \
                -H "Authorization: Bearer $ACCESS_TOKEN")
              
              folder_check_code=$(echo "$folder_check" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
              echo "🔍 Debug: Folder check HTTP Status: $folder_check_code"
              
              if [[ "$folder_check_code" -ne 200 ]]; then
                echo "🔍 Debug: Creating Diagrams folder..."
                create_folder=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
                  "https://graph.microsoft.com/v1.0/sites/${graph_site_url}/drives/${drive_id}/root/children" \
                  -H "Authorization: Bearer $ACCESS_TOKEN" \
                  -H "Content-Type: application/json" \
                  -d '{"name": "Diagrams", "folder": {}}')
                
                create_folder_code=$(echo "$create_folder" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
                create_folder_body=$(echo "$create_folder" | sed -E 's/HTTPSTATUS:[0-9]*$//')
                echo "🔍 Debug: Create folder HTTP Status: $create_folder_code"
                echo "🔍 Debug: Create folder Response: $create_folder_body"
                
                if [[ "$create_folder_code" -ne 200 && "$create_folder_code" -ne 201 ]]; then
                  echo "❌ Failed to create Diagrams folder"
                fi
              else
                echo "🔍 Debug: Diagrams folder already exists"
              fi
              
              # Now try uploading to Diagrams folder (primary method)
              echo "🔍 Debug: Uploading to Diagrams folder..."
              diagrams_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT \
                "https://graph.microsoft.com/v1.0/sites/${graph_site_url}/drives/${drive_id}/root:/Diagrams/Diagrams_Changelog.csv:/content" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: text/csv" \
                --data-binary @png_files/CHANGELOG.csv)
              
              diagrams_http_code=$(echo "$diagrams_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
              diagrams_response_body=$(echo "$diagrams_response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
              
              echo "🔍 Debug: Diagrams folder upload HTTP Status: $diagrams_http_code"
              echo "🔍 Debug: Diagrams folder upload Response: $diagrams_response_body"
              
              if [[ "$diagrams_http_code" -eq 200 || "$diagrams_http_code" -eq 201 ]]; then
                echo "✅ Uploaded changelog to SharePoint Diagrams folder"
              else
                echo "❌ Failed upload to Diagrams folder (HTTP $diagrams_http_code)"
                
                # Method 2: Try direct drive access to Diagrams folder
                echo "🔍 Debug: Method 2 - Trying direct drive access to Diagrams folder..."
                direct_diagrams_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT \
                  "https://graph.microsoft.com/v1.0/drives/${drive_id}/root:/Diagrams/Diagrams_Changelog.csv:/content" \
                  -H "Authorization: Bearer $ACCESS_TOKEN" \
                  -H "Content-Type: text/csv" \
                  --data-binary @png_files/CHANGELOG.csv)
                
                direct_diagrams_http_code=$(echo "$direct_diagrams_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
                direct_diagrams_response_body=$(echo "$direct_diagrams_response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
                
                echo "🔍 Debug: Direct Diagrams HTTP Status: $direct_diagrams_http_code"
                echo "🔍 Debug: Direct Diagrams Response: $direct_diagrams_response_body"
                
                if [[ "$direct_diagrams_http_code" -eq 200 || "$direct_diagrams_http_code" -eq 201 ]]; then
                  echo "✅ Uploaded changelog to SharePoint Diagrams folder (direct access)"
                else
                  echo "❌ Failed direct upload to Diagrams folder (HTTP $direct_diagrams_http_code)"
                  
                  # Method 3: Last resort - upload to root with clear naming
                  echo "🔍 Debug: Method 3 - Last resort upload to root..."
                  root_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X PUT \
                    "https://graph.microsoft.com/v1.0/drives/${drive_id}/root:/Diagrams_Changelog.csv:/content" \
                    -H "Authorization: Bearer $ACCESS_TOKEN" \
                    -H "Content-Type: text/csv" \
                    --data-binary @png_files/CHANGELOG.csv)
                  
                  root_http_code=$(echo "$root_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
                  root_response_body=$(echo "$root_response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
                  
                  echo "🔍 Debug: Root upload HTTP Status: $root_http_code"
                  echo "🔍 Debug: Root upload Response: $root_response_body"
                  
                  if [[ "$root_http_code" -eq 200 || "$root_http_code" -eq 201 ]]; then
                    echo "⚠️ Uploaded changelog to SharePoint root (fallback - please move to Diagrams folder)"
                  else
                    echo "❌ All SharePoint upload methods failed"
                    echo "🔍 Debug: Please verify permissions and configuration"
                  fi
                fi
              fi
            else
              echo "❌ Could not parse SharePoint URL: '$sharepoint_url'"
              echo "❌ Expected format: https://tenant.sharepoint.com/sites/sitename"
            fi
          else
            echo "❌ Failed to get SharePoint access token"
            echo "🔍 Debug: ACCESS_TOKEN length: ${#ACCESS_TOKEN}"
            echo "🔍 Debug: ACCESS_TOKEN starts with: $(echo "$ACCESS_TOKEN" | head -c 20)..."
          fi

      # SAP BTP upload temporarily disabled to prevent workflow failures

  notify:
    needs: process
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout for Teams Notification
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Send Teams Notification
        continue-on-error: true
        run: |
          echo "� Preparing Teams notification..."
          
          if [[ "${{ needs.process.result }}" == "success" ]]; then
            status="✅ Success"
            color="28a745"
          else
            status="❌ Failed"
            color="dc3545"
          fi
          
          processed="${{ needs.process.outputs.processed || '0' }}"
          failed="${{ needs.process.outputs.failed || '0' }}"
          
          # Get git information
          commit_hash=$(git log -1 --format="%h" 2>/dev/null || echo "unknown")
          commit_full_hash=$(git log -1 --format="%H" 2>/dev/null || echo "unknown")
          commit_message=$(git log -1 --format="%s" 2>/dev/null || echo "Manual processing")
          
          # Get author with fallback: display name -> email -> github actor
          author_display_name=$(git log -1 --format="%an" 2>/dev/null || echo "")
          author_email=$(git log -1 --format="%ae" 2>/dev/null || echo "")
          
          # Use display name, fallback to email if display name is empty or generic
          if [[ -z "$author_display_name" || "$author_display_name" == "GitHub" || "$author_display_name" == "github-actions" ]]; then
            if [[ -n "$author_email" && "$author_email" != "noreply@github.com" ]]; then
              author_info="$author_email"
            else
              author_info="${{ github.actor }}"
            fi
          else
            author_info="$author_display_name"
          fi
          
          # Get processed diagram name (single diagram per commit)
          diagram_name=""
          diagram_display_name=""
          if [[ -f "png_files/CHANGELOG.csv" ]]; then
            # Get the most recent diagram from changelog
            diagram_name=$(tail -n 1 png_files/CHANGELOG.csv | cut -d',' -f3 | tr -d '"' 2>/dev/null || echo "")
          fi
          
          if [[ -z "$diagram_name" || "$diagram_name" == "Diagram" || "$diagram_name" == "System" ]]; then
            diagram_display_name="No specific diagram"
          else
            # Parse the diagram name to extract readable parts
            # Expected format: x.y.description (e.g., "1.2.Azure Cloud Architecture")
            if [[ "$diagram_name" =~ ^([0-9]+)\.([0-9]+)\.(.+)$ ]]; then
              tech_id="${BASH_REMATCH[1]}"
              detail_level="${BASH_REMATCH[2]}"
              description="${BASH_REMATCH[3]}"
              
              # Map technology IDs to readable names
              case "$tech_id" in
                0) tech_name="Multi-tech" ;;
                1) tech_name="Cloud" ;;
                2) tech_name="Network" ;;
                3) tech_name="SAP" ;;
                *) tech_name="Tech-$tech_id" ;;
              esac
              
              # Map detail levels to readable names
              case "$detail_level" in
                1) detail_name="High-level" ;;
                2) detail_name="Intermediate" ;;
                3) detail_name="Detailed" ;;
                *) detail_name="Level-$detail_level" ;;
              esac
              
              diagram_display_name="📊 $description ($tech_name, $detail_name)"
            else
              diagram_display_name="� $diagram_name"
            fi
          fi
          
          echo "🔍 Debug: commit_hash=$commit_hash"
          echo "🔍 Debug: author_display_name=$author_display_name"
          echo "🔍 Debug: author_email=$author_email"
          echo "🔍 Debug: author_info=$author_info"
          echo "🔍 Debug: commit_message=$commit_message"
          echo "🔍 Debug: diagram_name=$diagram_name"
          
          # Check if Teams webhook is configured using organization variable
          teams_webhook="${{ vars.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}"
          
          echo "🔍 Teams webhook configured: $(if [[ -n "$teams_webhook" ]]; then echo "Yes (${#teams_webhook} chars)"; else echo "No"; fi)"
          echo "🔍 Using organization variable: DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK"
          echo "🔍 Variable status: $(if [[ -n "${{ vars.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}" ]]; then echo "Set"; else echo "Not set"; fi)"
          
          if [[ -n "$teams_webhook" ]]; then
            echo "� Sending Teams notification..."
            echo "🔍 Teams webhook URL starts with: $(echo "$teams_webhook" | head -c 50)..."
            
            # Create JSON payload with proper escaping
            echo "🔍 Sending payload to Teams..."
            
            # Simplified title
            simple_title="� Draw.io Processing Complete"
            
            # Build summary text
            if [[ "$processed" != "0" && "$failed" == "0" ]]; then
              summary_text="Successfully processed $processed diagram(s)"
            elif [[ "$processed" != "0" && "$failed" != "0" ]]; then
              summary_text="Processed $processed, failed $failed diagram(s)"
            elif [[ "$processed" == "0" && "$failed" != "0" ]]; then
              summary_text="Failed to process $failed diagram(s)"
            else
              summary_text="No diagrams found to process"
            fi
            
            # Escape commit message and diagram name for JSON
            escaped_commit_message=$(echo "$commit_message" | sed 's/"/\\"/g' | sed "s/'/\\'/g")
            escaped_diagram_display_name=$(echo "$diagram_display_name" | sed 's/"/\\"/g')
            escaped_author_info=$(echo "$author_info" | sed 's/"/\\"/g')
            
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "$teams_webhook" \
              -H "Content-Type: application/json" \
              -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"https://schema.org/extensions\",
                \"summary\": \"$simple_title\",
                \"themeColor\": \"$color\",
                \"title\": \"$simple_title\",
                \"text\": \"**Status:** $status - $summary_text\",
                \"sections\": [{
                  \"activityTitle\": \"📋 Processing Details\",
                  \"facts\": [
                    {\"name\": \"� Author\", \"value\": \"$escaped_author_info\"},
                    {\"name\": \"📝 Commit\", \"value\": \"$commit_hash\"},
                    {\"name\": \"💬 Message\", \"value\": \"$escaped_commit_message\"},
                    {\"name\": \"📊 Diagram\", \"value\": \"$escaped_diagram_display_name\"},
                    {\"name\": \"✅ Processed\", \"value\": \"$processed\"},
                    {\"name\": \"❌ Failed\", \"value\": \"$failed\"},
                    {\"name\": \"🔄 Run\", \"value\": \"#${{ github.run_number }}\"}
                  ]
                }],
                \"potentialAction\": [{
                  \"@type\": \"OpenUri\",
                  \"name\": \"� View Details\",
                  \"targets\": [{
                    \"os\": \"default\",
                    \"uri\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }]
                }, {
                  \"@type\": \"OpenUri\",
                  \"name\": \"📁 View Commit\",
                  \"targets\": [{
                    \"os\": \"default\",
                    \"uri\": \"${{ github.server_url }}/${{ github.repository }}/commit/$commit_full_hash\"
                  }]
                }]
              }")
            
            http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            response_body=$(echo "$response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
            
            echo "🔍 HTTP Status: $http_code"
            echo "🔍 Response: $response_body"
            
            if [[ "$http_code" -eq 200 ]]; then
              echo "✅ Teams notification sent successfully"
            elif [[ "$http_code" -eq 202 ]]; then
              echo "✅ Teams notification accepted (HTTP 202)"
            else
              echo "❌ Failed to send Teams notification (HTTP $http_code)"
              echo "🔍 Full response: $response"
              
              # Try simplified payload as fallback
              echo "🔍 Trying simplified Teams payload..."
              simple_payload="{\"text\":\"� Draw.io Processing $status - $processed files processed, $failed failed (Run #${{ github.run_number }})\"}"
              
              simple_response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "$teams_webhook" \
                -H "Content-Type: application/json" \
                -d "$simple_payload")
              
              simple_http_code=$(echo "$simple_response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
              simple_response_body=$(echo "$simple_response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
              
              echo "🔍 Simple payload HTTP Status: $simple_http_code"
              echo "🔍 Simple payload Response: $simple_response_body"
              
              if [[ "$simple_http_code" -eq 200 || "$simple_http_code" -eq 202 ]]; then
                echo "✅ Teams notification sent successfully (simple format)"
              else
                echo "❌ Both Teams notification attempts failed"
              fi
            fi
          else
            echo "⚠️ Teams webhook not configured"
            echo "ℹ️ To enable Teams notifications:"
            echo "   Set organization variable: DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK"
            echo "   This should contain your Teams webhook URL (no authentication required)"
          fi
          
          echo "📊 Final Summary:"
          echo "- Status: $status"
          echo "- Files processed: $processed"
          echo "- Files failed: $failed"
          echo "- Workflow run: #${{ github.run_number }}"
