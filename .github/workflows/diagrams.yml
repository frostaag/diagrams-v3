name: Draw.io to PNG Processing V3

on:
  push:
    paths:
      - 'drawio_files/**/*.drawio'
  workflow_dispatch:

env:
  DRAWIO_VERSION: "26.2.2"

permissions:
  contents: write

jobs:
  process:
    runs-on: ubuntu-latest
    outputs:
      processed: ${{ steps.convert.outputs.processed }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Draw.io
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xvfb
          wget -q "https://github.com/jgraph/drawio-desktop/releases/download/v${{ env.DRAWIO_VERSION }}/drawio-amd64-${{ env.DRAWIO_VERSION }}.deb"
          sudo apt-get install -y "./drawio-amd64-${{ env.DRAWIO_VERSION }}.deb"

      - name: Convert & Update Changelog
        id: convert
        shell: bash
        run: |
          set +e  # Disable exit on error for the entire script
          echo "🔍 Debug: Starting conversion process..."
          
          # Ensure directories exist
          mkdir -p png_files
          echo "📁 Created/verified png_files directory"
          
          # Initialize changelog if it doesn't exist
          if [[ ! -f "png_files/CHANGELOG.csv" ]]; then
            echo "Date,Time,Diagram,Action,Version,Commit,Author,CommitMessage" > png_files/CHANGELOG.csv
            echo "📄 Created new changelog file"
          else
            echo "📄 Using existing changelog file"
          fi
          
          echo "🔍 Debug: Checking for draw.io files..."
          
          # Get changed draw.io files - improved logic for only changed files
          changed_files=""
          
          # For push events, only process files that were actually changed in this commit
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "🔍 Debug: Push event detected, checking for changed files in this push..."
            
            # Try multiple methods to get changed files
            # Method 1: Use GitHub event before/after SHAs
            if [[ -n "${{ github.event.before }}" && -n "${{ github.event.after }}" && "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              echo "🔍 Debug: Using GitHub event SHAs..."
              changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} -- "drawio_files/**/*.drawio" 2>/dev/null || true)
              echo "🔍 Debug: GitHub event diff found: '$changed_files'"
            fi
            
            # Method 2: Fallback to HEAD^ comparison
            if [[ -z "$changed_files" ]] && git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              echo "🔍 Debug: Fallback - checking git diff HEAD^..HEAD..."
              changed_files=$(git diff --name-only HEAD^..HEAD -- "drawio_files/**/*.drawio" 2>/dev/null || true)
              echo "🔍 Debug: HEAD diff found: '$changed_files'"
            fi
            
            # Method 3: Use git log to find files changed in last commit
            if [[ -z "$changed_files" ]]; then
              echo "🔍 Debug: Using git log method..."
              changed_files=$(git log -1 --name-only --pretty=format: -- "drawio_files/**/*.drawio" 2>/dev/null | grep -v '^$' || true)
              echo "🔍 Debug: Git log found: '$changed_files'"
            fi
            
            # Additional check: only process files that actually exist
            if [[ -n "$changed_files" ]]; then
              existing_files=""
              for file in $changed_files; do
                if [[ -f "$file" ]]; then
                  existing_files="$existing_files $file"
                fi
              done
              changed_files=$(echo "$existing_files" | xargs -n1 2>/dev/null | sort -u | tr '\n' ' ' | sed 's/^ *//;s/ *$//')
              echo "🔍 Debug: Filtered to existing files: '$changed_files'"
            fi
          fi
          
          # For workflow_dispatch, process all files
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "🔍 Debug: Manual workflow dispatch detected, processing all .drawio files..."
            if [[ -d "drawio_files" ]]; then
              changed_files=$(find drawio_files -name "*.drawio" -type f 2>/dev/null || true)
              echo "🔍 Debug: Found all files for manual dispatch: '$changed_files'"
            fi
          fi
          
          if [[ -z "$changed_files" ]]; then
            echo "❌ No .drawio files found to process"
            echo "🔍 Debug: Contents of drawio_files directory:"
            ls -la drawio_files/ || echo "Directory doesn't exist"
            echo "processed=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "📊 Files to process:"
          echo "$changed_files"
          
          processed_count=0
          failed_count=0
          current_date=$(date +"%d.%m.%Y")
          current_time=$(date +"%H:%M:%S")
          commit_hash=$(git log -1 --format="%h" 2>/dev/null || echo "unknown")
          author_name=$(git log -1 --format="%an" 2>/dev/null || echo "GitHub Action")
          commit_message=$(git log -1 --format="%s" 2>/dev/null || echo "Manual processing")
          
          echo "🔄 Starting conversion process..."
          
          # Function to get next version for a diagram
          get_next_version() {
            local diagram_name="$1"
            local last_version="1.0"
            
            # Get the last version for this specific diagram from changelog
            if [[ -f "png_files/CHANGELOG.csv" ]]; then
              last_version=$(grep "^[^,]*,[^,]*,\"${diagram_name}\"," png_files/CHANGELOG.csv | tail -1 | cut -d'"' -f8 2>/dev/null || echo "1.0")
              if [[ -z "$last_version" || "$last_version" == "1.0" ]]; then
                last_version="1.0"
              fi
            fi
            
            # Increment version (simple major.minor increment)
            if [[ "$last_version" =~ ^([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              new_minor=$((minor + 1))
              echo "${major}.${new_minor}"
            else
              echo "1.1"  # Default if version parsing fails
            fi
          }
          
          # Process each file individually
          for file in $changed_files; do
            [[ -z "$file" ]] && continue
            
            basename=$(basename "$file" .drawio)
            png_file="png_files/${basename}.png"
            
            echo "🔄 Converting: $file -> $png_file"
            
            # Get version for this diagram
            version=$(get_next_version "$basename")
            echo "📊 Version for $basename: $version"
            
            # Check if source file exists
            if [[ ! -f "$file" ]]; then
              echo "❌ Source file not found: $file"
              action="Failed - Source Not Found"
              ((failed_count++))
            else
              # Convert to PNG with better error handling
              echo "🎨 Running draw.io conversion..."
              
              # Run draw.io conversion and capture output
              conversion_output=""
              if conversion_output=$(xvfb-run --auto-servernum --server-args="-screen 0 1024x768x24" drawio -x -f png -s 2.0 -o "$png_file" "$file" 2>&1); then
                conversion_success="true"
              else
                conversion_success="false"
              fi
              
              echo "🔍 Draw.io output: $conversion_output"
              echo "🔍 Conversion success: $conversion_success"
              
              # Check if conversion was successful by verifying the output file
              if [[ -f "$png_file" && -s "$png_file" ]]; then
                file_size=$(stat -c%s "$png_file" 2>/dev/null || stat -f%z "$png_file" 2>/dev/null || echo "unknown")
                echo "✅ Successfully converted $basename (${file_size} bytes)"
                action="Converted to PNG"
                ((processed_count++))
              else
                echo "❌ PNG conversion failed for: $basename"
                echo "🔍 Debug: PNG file exists: $(test -f "$png_file" && echo "yes" || echo "no")"
                echo "🔍 Debug: PNG file size: $(test -s "$png_file" && echo "non-zero" || echo "zero/missing")"
                action="Failed - Conversion Error"
                ((failed_count++))
              fi
            fi
            
            # Add to changelog with proper version
            echo "${current_date},${current_time},\"${basename}\",\"${action}\",\"${version}\",\"${commit_hash}\",\"${author_name}\",\"${commit_message}\"" >> png_files/CHANGELOG.csv || true
            
          done
          
          echo "📊 Conversion Summary:"
          echo "✅ Successfully processed: $processed_count files"
          echo "❌ Failed: $failed_count files"
          
          echo "processed=$processed_count" >> $GITHUB_OUTPUT
          echo "failed=$failed_count" >> $GITHUB_OUTPUT
          
          # List generated files
          echo "📁 Generated PNG files:"
          ls -la png_files/*.png 2>/dev/null || echo "No PNG files found"
          
          echo "📄 Changelog contents:"
          tail -5 png_files/CHANGELOG.csv 2>/dev/null || echo "No changelog entries found"
          
          echo "🔍 Debug: Final checks before exit..."
          echo "🔍 Debug: processed_count=$processed_count"
          echo "🔍 Debug: failed_count=$failed_count"
          echo "🔍 Debug: PNG files exist: $(ls png_files/*.png 2>/dev/null | wc -l || echo 0)"
          echo "🔍 Debug: Changelog exists: $(test -f png_files/CHANGELOG.csv && echo "yes" || echo "no")"
          
          # Ensure the script exits successfully
          echo "🔍 Debug: Exiting with success..."
          exit 0

      - name: Commit Changes
        if: steps.convert.outputs.processed != '0'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add png_files/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate PNG files and update changelog [skip ci]"
            git push
          fi

      - name: Upload to SharePoint
        if: steps.convert.outputs.processed != '0'
        continue-on-error: true
        run: |
          # Get access token
          ACCESS_TOKEN=$(curl -s -X POST \
            "https://login.microsoftonline.com/${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}" \
            -d "scope=https://graph.microsoft.com/.default" \
            -d "grant_type=client_credentials" | \
            jq -r '.access_token')
          
          if [[ "$ACCESS_TOKEN" != "null" && -n "$ACCESS_TOKEN" ]]; then
            # Upload changelog
            curl -s -X PUT \
              "https://graph.microsoft.com/v1.0/drives/${{ vars.DIAGRAMS_SHAREPOINT_DRIVE_ID }}/root:/Diagrams/Diagrams_Changelog.csv:/content" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: text/csv" \
              --data-binary @png_files/CHANGELOG.csv
            echo "✅ Uploaded changelog to SharePoint"
          else
            echo "❌ Failed to get SharePoint access token"
          fi

  notify:
    needs: process
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send Teams Notification
        continue-on-error: true
        run: |
          echo "🔔 Preparing Teams notification..."
          
          if [[ "${{ needs.process.result }}" == "success" ]]; then
            status="✅ Success"
            color="28a745"
          else
            status="❌ Failed"
            color="dc3545"
          fi
          
          processed="${{ needs.process.outputs.processed || '0' }}"
          failed="${{ needs.process.outputs.failed || '0' }}"
          
          # Check if Teams webhook is configured
          teams_webhook="${{ vars.DIAGRAMS_TEAMS_WEBHOOK }}"
          echo "🔍 Teams webhook configured: $(if [[ -n "$teams_webhook" ]]; then echo "Yes (${#teams_webhook} chars)"; else echo "No"; fi)"
          
          if [[ -n "$teams_webhook" ]]; then
            echo "📤 Sending Teams notification..."
            echo "🔍 Teams webhook URL starts with: $(echo "$teams_webhook" | head -c 50)..."
            
            echo "🔍 Sending payload to Teams..."
            response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "$teams_webhook" \
              -H "Content-Type: application/json" \
              -d "{
                \"@type\": \"MessageCard\",
                \"@context\": \"https://schema.org/extensions\",
                \"summary\": \"Draw.io Processing $status\",
                \"themeColor\": \"$color\",
                \"title\": \"📊 Draw.io Processing V3\",
                \"text\": \"Processing completed: $status\",
                \"sections\": [{
                  \"facts\": [
                    {\"name\": \"📁 Files Processed\", \"value\": \"$processed\"},
                    {\"name\": \"❌ Files Failed\", \"value\": \"$failed\"},
                    {\"name\": \"🔄 Workflow Run\", \"value\": \"#${{ github.run_number }}\"},
                    {\"name\": \"🌿 Branch\", \"value\": \"${{ github.ref_name }}\"}
                  ]
                }],
                \"potentialAction\": [{
                  \"@type\": \"OpenUri\",
                  \"name\": \"View Run Details\",
                  \"targets\": [{
                    \"os\": \"default\",
                    \"uri\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }]
                }]
              }")
            
            http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            response_body=$(echo "$response" | sed -E 's/HTTPSTATUS:[0-9]*$//')
            
            echo "🔍 HTTP Status: $http_code"
            echo "🔍 Response: $response_body"
            
            if [[ "$http_code" -eq 200 ]]; then
              echo "✅ Teams notification sent successfully"
            else
              echo "❌ Failed to send Teams notification (HTTP $http_code)"
              echo "🔍 Response body: $response_body"
            fi
          else
            echo "⚠️ Teams webhook not configured (DIAGRAMS_TEAMS_WEBHOOK variable missing)"
            echo "ℹ️ To enable Teams notifications:"
            echo "   1. Go to Repository Settings > Variables and secrets > Variables"
            echo "   2. Add a new variable named 'DIAGRAMS_TEAMS_WEBHOOK'"
            echo "   3. Set the value to your Teams webhook URL"
          fi
          
          echo "📊 Final Summary:"
          echo "- Status: $status"
          echo "- Files processed: $processed"
          echo "- Files failed: $failed"
          echo "- Workflow run: #${{ github.run_number }}"
